# .github/workflows/main.yml

name: CI/CD Pipeline - Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: qr-code-generator-app
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} 

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
    - name: ‚¨áÔ∏è Checkout Repository
      uses: actions/checkout@v4

    - name: üîë Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: üìê Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üî® Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

    - name: ‚úÖ Run a basic container test (Optional but Recommended)
      run: |
        docker run --rm --name test-run -d ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        sleep 5 # Wait for the application to run and generate the QR code
        docker logs test-run
        # Check if a QR code file was created (the qr_codes directory should exist after the run)
        # Note: This check is limited in a standard build/push action and is more for ensuring a successful start.
        # A full integration test would require volumes or other artifacts.